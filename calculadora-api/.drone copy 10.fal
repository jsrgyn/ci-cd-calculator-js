kind: pipeline
type: ssh
name: CI e Deploy

# A seção 'node' não é mais necessária, pois o runner SSH não usa labels
# para selecionar o servidor, ele usa a diretiva 'server'..
node:
   environment: ssh-build
   arch: arm64

server:
  host: build-server-node
  user: root
  ssh_key:
    from_secret: BUILD_SERVER_SSH_KEY

trigger:
  event:
    - push
    - pull_request

steps:
  - name: Setup do Projeto
    commands:
      - npm ci
      - mkdir -p reports coverage

  - name: Verificação de Lint
    commands:
      - npm run lint:report

  - name: Testes Unitários com Cobertura
    commands:
      - npm test -- --coverage

  - name: Análise e Validação do SonarQube
  # Este passo combina a análise e a validação do Quality Gate
    environment:
      SONAR_TOKEN:
        from_secret: SONAR_TOKEN
      SONAR_HOST_URL:
        from_secret: SONAR_HOST_URL
    commands:
      - set -e
      - npx sonar-scanner -Dsonar.token=$SONAR_TOKEN -Dsonar.host.url=$SONAR_HOST_URL

- name: Validar Quality Gate
  environment:
    SONAR_TOKEN:
      from_secret: SONAR_TOKEN
    SONAR_HOST_URL:
      from_secret: SONAR_HOST_URL
  commands:
    - set -e
    - |
      echo "Aguardando processamento da análise no SonarQube..."
      sleep 10

      # Obtém o último task.id da análise finalizada
      taskId=$(curl -s -u "$SONAR_TOKEN:" "$SONAR_HOST_URL/api/project_analyses/search?project=calculadora-api" | jq -r '.current.component.analysisId')
      echo "Último taskId: $taskId"

      status=""
      tentativas=0
      while [ "$status" != "SUCCESS" ] && [ $tentativas -lt 10 ]; do
        sleep 5
        status=$(curl -s -u "$SONAR_TOKEN:" "$SONAR_HOST_URL/api/ce/task?id=$taskId" | jq -r '.task.status')
        echo "Status: $status"
        tentativas=$((tentativas+1))
      done
    when:
      event:
        - push
        - pull_request

      qualityStatus=$(curl -s -u "$SONAR_TOKEN:" "$SONAR_HOST_URL/api/qualitygates/project_status?projectKey=calculadora-api" | jq -r '.projectStatus.status')
      echo "Resultado do Quality Gate: $qualityStatus"

      if [ "$qualityStatus" != "OK" ]; then
        echo "❌ Quality Gate falhou. Bloqueando deploy."
        exit 1
      else
        echo "✅ Quality Gate aprovado. Continuando pipeline."
      fi
    when:
      event:
        - push
        - pull_request

  # Removido o passo "Validar Quality Gate". Veja recomendação #2
  
  - name: Deploy em Homologação
    commands:
      - pm2 stop calculadora-api-homolog || true
      - pm2 delete calculadora-api-homolog || true
      - pm2 start src/index.js --name calculadora-api-homolog
    when:
      # Este passo só roda quando um PUSH acontece na branch MAIN
      # ou seja, APÓS um merge ser concluído com sucesso.
      event:
        - push
      branch:
        - main