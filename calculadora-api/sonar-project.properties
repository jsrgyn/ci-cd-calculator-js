# --- Informações Essenciais do Projeto ---
# Chave única e imutável do projeto. Use o nome do repo.
sonar.projectKey=calculadora-api
# Nome amigável que aparece no dashboard.
sonar.projectName=API da Calculadora
# A versão pode ser injetada pelo CI. Ex: sonar.projectVersion=${DRONE_TAG}
sonar.projectVersion=1.0

# Fontes e testes em diretórios separados
# --- Configuração de Caminhos ---
# Onde está seu código fonte principal.
sonar.sources=src
# Onde estão seus testes. É importante separá-los para o Sonar não analisar
# os testes como se fossem código de produção.
sonar.tests=test

# Remover esta linha (obsoleta e pode causar conflito)
# sonar.language=js

sonar.sourceEncoding=UTF-8

# Caminho do relatório de cobertura do Jest
# --- Integração com Ferramentas de Teste e Qualidade (A PARTE MAIS IMPORTANTE) ---

# 1. Cobertura de Testes:
# Diga ao Sonar onde encontrar o relatório de cobertura gerado pelo Jest.
# A flag '--coverage' do Jest gera a pasta 'coverage/'. O lcov.info é o formato padrão.
sonar.javascript.lcov.reportPaths=coverage/lcov.info

# 2. Relatório do ESLint:
# O Sonar pode importar os resultados do ESLint para um dashboard unificado.
# Primeiro, gere o relatório no seu CI. Modifique o 'package.json':
# "lint": "eslint src/**/*.js -f json -o reports/eslint-report.json"
# Depois, informe ao Sonar onde encontrá-lo.
sonar.eslint.reportPaths=reports/eslint-report.json

# --- Configurações Adicionais ---

# Exclusões: Se você tiver arquivos gerados, mocks ou bibliotecas de terceiros
# dentro da pasta 'src', exclua-os da análise.
sonar.exclusions=**/node_modules/**, **/*.spec.js

# Análise de Pull Request (Configurado no CI, não aqui)
# Em ferramentas como Jenkins, GitLab CI ou GitHub Actions, você passaria
# parâmetros como -Dsonar.pullrequest.key, -Dsonar.pullrequest.branch, etc.
# O Drone CI tem integrações que podem fazer isso de forma mais nativa.